


其实采用面向对象的思想,在代码里使用class的写法,封装各种相关的属性和函数到一个对象里面,后面在各处调用起来会很方便.

其实使用class写法本质上和使用函数写法是一样的,都是调用函数来完成各种功能.
但是代码的封装性会更好,还有就是`面向对象-在代码里使用各种对象的思路`.

一个函数,原先就是传入参数,调用它,然后返回一个结果,
现在就是,写个class,它会带有init和那个函数,然后使用时要传参来初始化这个对象,再调用它的方法,完成同样的功能.
但是,封装性会很好,代码也解耦合,是使用对象的思想!!
OOP使用类将数据和数据相关的方法封装在一起,以及封装性,继承性,多态性等特点.

最大的好处应该是 使用了面向对象的思思维来写代码，使用各个对象来实现功能，更加符合人类的思维...
使用class后,既可以把一个class的对象当成`数据容器`使用,封装数据,又可以当成函数来使用,直接调用其各种方法.
把相关的数据和函数放在一起,封装在一个局部作用域内(对象的内存里面),要变量有变量,要函数有函数,真是很好的写代码思路...

面向对象编程
面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。

面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，
即把大块函数通过切割成小块函数来降低系统的复杂度。

而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，
计算机程序的执行就是一系列消息在各个对象之间传递。

在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。

我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。

假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个dict表示：

std1 = { 'name': 'Michael', 'score': 98 }
std2 = { 'name': 'Bob', 'score': 81 }

而处理学生成绩可以通过函数实现，比如打印学生的成绩：

def print_score(std):
    print '%s: %s' % (std['name'], std['score'])

如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是Student这种数据类型应该被视为一个对象，这个对象拥有name和score这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个print_score消息，让对象自己把自己的数据打印出来。

class Student(object):

    def __init__(self, name, score):
        self.name = name
        self.score = score

    def print_score(self):
        print '%s: %s' % (self.name, self.score)

给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。面向对象的程序写出来就像这样：

bart = Student('Bart Simpson', 59)
lisa = Student('Lisa Simpson', 87)
bart.print_score()
lisa.print_score()

面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。Class是一种抽象概念，比如我们定义的Class——Student，
是指学生这个概念，而实例（Instance）则是一个个具体的Student，比如，Bart Simpson和Lisa Simpson是两个具体的Student：

所以，面向对象的设计思想是抽象出Class，根据Class创建Instance。

面向对象的抽象程度又比函数要高，因为一个Class既包含数据，又包含操作数据的方法。
小结

数据封装、继承和多态是面向对象的三大特点，我们后面会详细讲解。




