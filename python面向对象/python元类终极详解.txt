

元类就是用来创建类的类(type类或自定义继承自type类的子类):
*********************************************元类必备知识*****************************************************************
1.当python解释器读取了代码里clss段的定义时,就会在背后调用type()函数[调用type()函数其实也就是type类的实例化过程,创建一个type类的对象!],
来创建这个类本身到内存中(其实任何自定义的类本身都是type类的一个实例而已),
2.然后,这个类本身就被创建好,并存在于内存中了,然后就可以使用这个类了,比如实例化它来创建它的实例对象,
在创建一个类的实例化对象的过程中,又有2个方法需要掌握:
 a.__new__(cls, arg1, arg2)
   __new__是真正创建对象的第一步,它是个类方法,需要使用这个cls本身来创建对象,这一步生成的对象都是一样的,因为对象还未被'初始化',
 b.__init__(self, arg1, arg2)
   __init__是对象的初始化过程,它的参数是self,是__new__创建好的对象实例传给它,让它来初始化对象,赋不同初始值,然后每个对象就不一样了(不同的属性值).
3.在class的定义里面使用__metaclass__来指定新的metaclass(元类),就是创建该类本身时不直接使用type类,
而是使用自定义的继承自type类的子类XXtype类,来创建这个类本身到内存中.
所以,元类的使用其实有2步:
 a.要继承type类实现自己的XXtype子类,作为后面某个clss要使用的元类,
 b.在class里面使用__metaclass__指定使用上面自定义的XXtype即可.
*************************************************************************************************************************

python默认是使用type类来实例化创建各种自定义的类的:
1.使用type类创建一个类本身,也就是创建type类的实例对象,但参数会根据不同的class定义而不同,所以会创建出不同的类:
  Foo = type('Foo', (object,), {"__doc__": "A class that does nothing.", "__init__": __init__, "magic": magic})
2.创建类的实例对象:
  f = Foo()

==========================================================================================
基于以上原理,完全可以继承type类来实现自定义的元类(Metaclass),其实就是写type类的子类,以自定义一些功能,
然后再在某个类中通过__metaclass__指定它使用自定义的这个元类(Metaclass)来创建该类本身,而不是使用type类.
==========================================================================================
class ListMetaclass(type):
    # 元类一般需要和__new__结合起来使用:
    def __new__(cls, name, bases, attrs):
        print '===========>>'
        attrs['add'] = lambda self, value: self.append(value)
        return type.__new__(cls, name, bases, attrs)

class MyList(list):
    __metaclass__ = ListMetaclass  # 指示使用ListMetaclass来定制类
# 或直接这样创建Mylist类:    
MyList = ListMetaclass('MyList', (list,), {})


m1 = MyList()
print m1.add
以上示例通过ListMetaclass元类来使得所有MyList类都带有一个add方法.






